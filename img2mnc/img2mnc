#! /usr/bin/env perl
#
# Andrew Janke - a.janke@gmail.com
# The University of Queensland
#
# Copyright Andrew Janke, The University of Queensland.
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.  The
# author and the University make no representations about the
# suitability of this software for any purpose.  It is provided "as is"
# without express or implied warranty.


#use strict;
use warnings "all";
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp qw/ tempdir /;

# until I get organised and do this properly
my $PACKAGE = &basename($0);
my $VERSION = '1.0.0';
my $PACKAGE_BUGREPORT = '"Andrew Janke" <a.janke@gmail.com>';

my $MM_PER_INCH = "25.399999999972568";

my($me, %opt, $infile, $outfile, @args, $tmpdir);

$me = &basename($0);
%opt = (
   'verbose' => 0,
   'clobber' => 0,
   'fake' => 0,
   'slice_thickness' => 1.0,
   );

# get history string
chomp($history = `date`);
$history .= '>>>> ' . join(' ', $me, @ARGV);

# Check arguments
GetOptions(
   'help|?' => \$opt{'help'},
   'man' => \$opt{'man'},
   'v|verbose' => \$opt{'verbose'},
   'version' => sub { &print_version_info },
   'c|clobber' => \$opt{'clobber'},
   'f|fake' => \$opt{'fake'},
   'slice_thickness=f' => \$opt{'slice_thickness'},
   ) or pod2usage(-verbose => 1) && exit;

# handle -man, -help or missing args
pod2usage(-verbose => 1) if $opt{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $opt{man};
pod2usage(-verbose => 0) && exit if ($#ARGV < 0);

# get input arguments
$infile = shift(@ARGV);
$outfile = shift(@ARGV);

# check for files
die "$me: Couldn't find input file: $infile\n" if (!-e $infile);
if(-e $outfile && !$opt{clobber}){
   die "$me: $outfile exists, -clobber to overwrite\n";
   }

# make tmpdir
$tmpdir = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );



print "$me: Working on $infile\n";


&do_cmd('convert', '-flip', '-type', 'Grayscale', 
   $infile, "GRAY:$tmpdir/IMG.raw");

# get number of elements
chomp($buf = `identify -format "%w %h" $infile`);
($xnelem, $ynelem) = split(/\ /, $buf, 2);

$znelem = 1;

# get step size (scale to mm)
chomp($buf = `identify -format "%x %y" $infile`);
($xstep, undef, $ystep, undef) = split(/\ /, $buf, 4);

$xstep = $xstep / $MM_PER_INCH;
$ystep = $ystep / $MM_PER_INCH;

$zstep = $opt{'slice_thickness'};

# calculate starts
$xstart = -1 * ($xnelem * $xstep) / 2;
$ystart = -1 * ($ynelem * $ystep) / 2;
$zstart = -1 * ($znelem * $zstep) / 2;

&do_cmd('rawtominc', '-2', '-clobber',
   '-zyx', 
   '-nomodality',
   '-sattribute', ":history='$history'",
   '-byte',
   '-xstep', $xstep, '-ystep', $ystep, '-zstep', $zstep,
   '-xstart', $xstart, '-ystart', $ystart, '-zstart', $zstart,
   '-input', "$tmpdir/IMG.raw",
   $outfile, $znelem, $ynelem, $xnelem);
   


# add the history string to the output file
#&do_cmd('minc_modify_header',
#   '-sappend', ":history='$history'",
#   $outfile);



sub do_cmd { 
   print STDOUT "@_\n" if $opt{verbose};
   if(!$opt{fake}){
      system(@_) == 0 or die;
      }
   }

sub print_version_info {
   print STDOUT "\n$PACKAGE version $VERSION\n".
                "Comments to $PACKAGE_BUGREPORT\n\n";
   exit;
   }


__END__

=head1 NAME

B<img2mnc> - convert an image (PNG, JPG, etc) to MINC

=head1 SYNOPSIS

B<img2mnc> [options] <infile.{png|jpg|tif|gif}> <outfile.mnc>

B<img2mnc> takes an input image (any format readable by imagemagick)
and converts it to MINC

=head1 DESCRIPTION

B<img2mnc> arose out of the need from converting multiple histology formats to
MINC.

 eg:
    $ img2mnc in.png out.mnc

=head1 OPTIONS

=over 4

=item B<-v>, B<--verbose>

Be noisy when doing things (most importantly this will echo the resulting script to the terminal)

=item B<--version>

Print version number and exit

=item B<-c>, B<--clobber>

Overwrite existing files

=item B<-h>, B<--help>

Dump some quick help output

=item B<--man>

Dump a man page

=item B<-f>, B<--fake>

Do a dry run. This is usually only useful if combined with --verbose so that you can see what is going on.


=back

=head1 AUTHOR

Problems or Comments to: Andrew Janke - B<a.janke@gmail.com>

=cut


