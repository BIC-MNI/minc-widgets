#! /usr/bin/env perl
#
# Andrew Janke - a.janke@gmail.com
# http://a.janke.googlepages.com/
#
# Copyright 2006 Andrew Janke
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.
# The author makes no representations about the suitability of this 
# software for any purpose.  It is provided "as is" without express 
# or implied warranty.

$| = 1;


use strict;
use warnings "all";
use Getopt::Tabular;
use File::Basename;
use File::Temp qw/ tempdir /;

# until I get organised and do this properly
my $PACKAGE = &basename($0);
my $VERSION = '1.0.0';
my $PACKAGE_BUGREPORT = '"Andrew Janke" <a.janke@gmail.com>';

my($Help, $Usage, $me, @opt_table, %opt, @infiles, $avgfile);

$me = &basename($0);
%opt = (
   'verbose' => 0,
   'clobber' => 0,
   'fake' => 0,
   'avgnum' => 20,
   'sdfile' => undef,
   'filelist' => undef,
   'output_type' => 'short',
   'max_buffer_size_in_kb' => 1048576,
   );

$Help = <<HELP;
| $me will average 1000's of minc files
|
| Problems or comments should be sent to: a.janke\@gmail.com
HELP

$Usage = "Usage: $me [options] <in1.mnc> [<in2.mnc> [..]] <avg.mnc>\n".
         "       $me -help to list options\n\n";

@opt_table = (
   ["-version", "call", 0, \&print_version_info,
      "print version and exit" ],
   ['-verbose', 'boolean', 0, \$opt{'verbose'},
      'be verbose'],
   ["-clobber", "boolean", 0, \$opt{'clobber'},
      "clobber existing check files" ],
   ['-fake', 'boolean', 0, \$opt{'fake'},
      'do a dry run, (echo cmds only)' ],
   
   ['-byte', 'const', 'byte', \$opt{'output_type'},
      'write out byte data'],
   ['-short', 'const', 'short', \$opt{'output_type'},
      'write out short data'],
   ['-long', 'const', 'long', \$opt{'output_type'},
      'write out long data'],
   ['-float', 'const', 'float', \$opt{'output_type'},
      'write out float data'],
   ['-double', 'const', 'double', \$opt{'output_type'},
      'write out double data'],
   
   ['-sdfile', 'string', 1, \$opt{'sdfile'},
      'filename in which to store the standard deviation' ],
   ['-avgnum', 'integer', 1, \$opt{'avgnum'},
      'number of files to average in each chunk' ],
   
   ['-filelist', 'string', 1, \$opt{'filelist'},
      'Specify the name of a file containing input file names' ],
   );

# Check arguments
&Getopt::Tabular::SetHelp ($Help, $Usage);
&GetOptions (\@opt_table, \@ARGV) || exit 1;
die $Usage if ($#ARGV < 0);

# get and check for files
$avgfile = pop(@ARGV);

# setup infiles
if(defined $opt{'filelist'}){
   @infiles = split(/\n/, `cat $opt{'filelist'}`);
   }
else{
   @infiles = @ARGV;
   }
if(-e $avgfile && !$opt{'clobber'}){
   die "$me: $avgfile exists, -clobber to overwrite\n\n";
   }
if(defined($opt{'sdfile'}) && -e $opt{'sdfile'} && !$opt{'clobber'}){
   die "$me: $opt{'sdfile'} exists, -clobber to overwrite\n\n";
   }

# make tmpdir
$opt{'tmpdir'} = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );

# do the nasty
my($i, $start, $stop, @avgfiles, $nfiles);
for($i=0; $i<=$#infiles; $i+=$opt{'avgnum'}){
   
   $start = $i;
   $stop = ($i+$opt{'avgnum'} - 1 < $#infiles) ? $i + $opt{'avgnum'} - 1 : $#infiles;
   
   print STDOUT "Averaging files [$start - $stop]/$#infiles ";
   
   @avgfiles = @infiles[$start..$stop];
   
   &do_cmd('minccalc', 
      '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
      '-quiet', '-clobber',
      '-double',
      '-expression', "s1 = s2 = 0; for {i in [0:len(A))} { v=A[i]; if (!isnan(v)) { s1 = s1 + v; s2 = s2 + v*v; } };",
      '-outfile', 's1', "$opt{'tmpdir'}/s1-u.mnc",
      '-outfile', 's2', "$opt{'tmpdir'}/s2-u.mnc",
      @avgfiles);
   
   print STDOUT "[CALC] ";
   
   # add to current total
   if($i == 0){
      &do_cmd('mv', "$opt{'tmpdir'}/s1-u.mnc", "$opt{'tmpdir'}/s1.mnc");
      &do_cmd('mv', "$opt{'tmpdir'}/s2-u.mnc", "$opt{'tmpdir'}/s2.mnc");
      }
   else{
      &do_cmd('mincmath', 
         '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
         '-quiet', '-double', 
         '-add', "$opt{'tmpdir'}/s1.mnc", "$opt{'tmpdir'}/s1-u.mnc", "$opt{'tmpdir'}/s1-t.mnc");
      &do_cmd('mincmath', 
         '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
         '-quiet', '-double', 
         '-add', "$opt{'tmpdir'}/s2.mnc", "$opt{'tmpdir'}/s2-u.mnc", "$opt{'tmpdir'}/s2-t.mnc");
      &do_cmd('mv', '-f', "$opt{'tmpdir'}/s1-t.mnc", "$opt{'tmpdir'}/s1.mnc");
      &do_cmd('mv', '-f', "$opt{'tmpdir'}/s2-t.mnc", "$opt{'tmpdir'}/s2.mnc");
      }   
   print STDOUT "[MV-ADD]\n";   
   }

# average
$nfiles = $#infiles + 1;
&do_cmd('minccalc', '-clobber',
   '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
   "-$opt{'output_type'}",
   '-expression', "A[0] / $nfiles",
   "$opt{'tmpdir'}/s1.mnc",
   $avgfile);

# standard deviation
if($opt{'sdfile'}){
   
   my($nfiles_less_one) = $nfiles - 1;
   &do_cmd('minccalc', '-clobber', 
      '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
      "-$opt{'output_type'}",
      '-expression', "sqrt((A[1] - A[0]*A[0]/$nfiles) / $nfiles_less_one)",
      "$opt{'tmpdir'}/s1.mnc",
      "$opt{'tmpdir'}/s2.mnc",
      $opt{'sdfile'});
   }


sub do_cmd { 
   print STDOUT "@_\n" if $opt{verbose};
   if(!$opt{fake}){
      system(@_) == 0 or die;
   }
}

sub print_version_info {
   print STDOUT "\n$PACKAGE version $VERSION\n".
                "Comments to $PACKAGE_BUGREPORT\n\n";
   exit;
   }
