#! /usr/bin/env perl
#
# Andrew Janke - a.janke@gmail.com
# http://a.janke.googlepages.com/
#
# Copyright 2006 Andrew Janke
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.
# The author makes no representations about the suitability of this 
# software for any purpose.  It is provided "as is" without express 
# or implied warranty.

$| = 1;


use strict;
use warnings "all";
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp qw/ tempdir /;

# until I get organised and do this properly
my $PACKAGE = &basename($0);
my $VERSION = '1.1.0';
my $PACKAGE_BUGREPORT = '"Andrew Janke" <a.janke@gmail.com>';

my($Help, $Usage, $me, @opt_table, %opt, @infiles, $avgfile);

$me = &basename($0);
%opt = (
   'verbose' => 0,
   'clobber' => 0,
   'fake' => 0,
   'tmpdir' => undef,
   'avgnum' => 20,
   'sdfile' => undef,
   'filelist' => undef,
   'robust' => 0,
   'robust_cutoff' => [1.0, 1.2],
   'output_type' => '-short',
   'max_buffer_size_in_kb' => 1048576,
   );

# check arguments
&GetOptions(
   'help|?' => \$opt{'help'},
   'man' => \$opt{'man'},
   'v|verbose' => \$opt{'verbose'},
   'c|clobber' => \$opt{'clobber'},
   'version' => sub { &print_version_info },
   'f|fake' => \$opt{'fake'},
   't|tmpdir=s' => \$opt{'tmpdir'},
   
   'byte' => sub { $opt{'output_type'} = '-byte' },
   'short' => sub { $opt{'output_type'} = '-short' },
   'long' => sub { $opt{'output_type'} = '-long' },
   'float' => sub { $opt{'output_type'} = '-float' },
   'double' => sub { $opt{'output_type'} = '-double' },
    
   'sdfile=s' => \$opt{'sdfile'},
   'avgnum=i' => \$opt{'avgnum'},
   'filelist=s' => \$opt{'filelist'},
   
   'robust' => \$opt{'robust'},
   'robust_cutoff=f{2}' => \@{$opt{'robust_cutoff'}},
   
   ) or pod2usage(-verbose => 1) && exit;
   

# handle -man, -help or missing args
pod2usage('-verbose' => 1) if $opt{'help'};
pod2usage('-exitstatus' => 0, '-verbose' => 2) if $opt{'man'};
pod2usage('-verbose' => 0) && exit if ($#ARGV < 0);

# get and check for files
$avgfile = pop(@ARGV);

# setup infiles
if(defined $opt{'filelist'}){
   @infiles = split(/\n/, `cat $opt{'filelist'}`);
   }
else{
   @infiles = @ARGV;
   }
if(-e $avgfile && !$opt{'clobber'}){
   die "$me: $avgfile exists, -clobber to overwrite\n\n";
   }
if(defined($opt{'sdfile'}) && -e $opt{'sdfile'} && !$opt{'clobber'}){
   die "$me: $opt{'sdfile'} exists, -clobber to overwrite\n\n";
   }

# make tmpdir
if(defined($opt{'tmpdir'})){
   &do_cmd('mkdir', '-p', $opt{'tmpdir'});
   $opt{'tmpdir'} = &tempdir("$me-XXXXXXXX", TMPDIR => 1, DIR => $opt{'tmpdir'}, CLEANUP => 1);
   }
else{
   $opt{'tmpdir'} = &tempdir("$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1);
   }

# do the nasty
my($i, $start, $stop, @avgfiles, $nfiles);
for($i=0; $i<=$#infiles; $i+=$opt{'avgnum'}){
   
   $start = $i;
   $stop = ($i+$opt{'avgnum'} - 1 < $#infiles) ? $i + $opt{'avgnum'} - 1 : $#infiles;
   
   print STDOUT "Averaging files [$start - $stop]/$#infiles ";
   
   @avgfiles = @infiles[$start..$stop];
   
   &do_cmd('minccalc', 
      '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
      '-quiet', '-clobber',
      '-double',
      '-expression', "s1 = s2 = 0; for {i in [0:len(A))} { v=A[i]; if (!isnan(v)) { s1 = s1 + v; s2 = s2 + v*v; } };",
      '-outfile', 's1', "$opt{'tmpdir'}/s1-u.mnc",
      '-outfile', 's2', "$opt{'tmpdir'}/s2-u.mnc",
      @avgfiles);
   
   print STDOUT "[CALC] ";
   
   # add to current total
   if($i == 0){
      &do_cmd('mv', "$opt{'tmpdir'}/s1-u.mnc", "$opt{'tmpdir'}/s1.mnc");
      &do_cmd('mv', "$opt{'tmpdir'}/s2-u.mnc", "$opt{'tmpdir'}/s2.mnc");
      }
   else{
      &do_cmd('mincmath', 
         '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
         '-quiet', '-double', 
         '-add', "$opt{'tmpdir'}/s1.mnc", "$opt{'tmpdir'}/s1-u.mnc", "$opt{'tmpdir'}/s1-t.mnc");
      &do_cmd('mincmath', 
         '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
         '-quiet', '-double', 
         '-add', "$opt{'tmpdir'}/s2.mnc", "$opt{'tmpdir'}/s2-u.mnc", "$opt{'tmpdir'}/s2-t.mnc");
      &do_cmd('mv', '-f', "$opt{'tmpdir'}/s1-t.mnc", "$opt{'tmpdir'}/s1.mnc");
      &do_cmd('mv', '-f', "$opt{'tmpdir'}/s2-t.mnc", "$opt{'tmpdir'}/s2.mnc");
      }   
   print STDOUT "[MV-ADD]\n";   
   }

# setup output files
my($iavg);
if($opt{'robust'}){
   $iavg = "$opt{'tmpdir'}/iavg.mnc";
   }
else{
   $iavg = $avgfile;
   }

# average
$nfiles = $#infiles + 1;
&do_cmd('minccalc', '-clobber',
   '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
   $opt{'output_type'},
   '-expression', "A[0] / $nfiles",
   "$opt{'tmpdir'}/s1.mnc",
   $iavg);

# standard deviation
if($opt{'sdfile'}){
   
   my($nfiles_less_one) = $nfiles - 1;
   &do_cmd('minccalc', '-clobber', 
      '-max_buffer_size_in_kb', $opt{'max_buffer_size_in_kb'},
      $opt{'output_type'},
      '-expression', "sqrt((A[1] - A[0]*A[0]/$nfiles) / $nfiles_less_one)",
      "$opt{'tmpdir'}/s1.mnc",
      "$opt{'tmpdir'}/s2.mnc",
      $opt{'sdfile'});
   }

# do robust averaging if required
if($opt{'robust'}){
   
   my @numer_files = ();
   my @denom_files = ();
   foreach $i (@infiles){
      print STDOUT "[ROBUST] Doing $i";
      
      my $bname = &basename($i);
      
      &do_cmd('minccalc', '-clobber',
         '-max_buffer_size_in_kb', 4096000,
         '-expression', '(abs(A[2]) < 0.001) ? 0 : abs((A[0] - A[1])/A[2])',
         $i, $iavg,  $opt{'sdfile'},
         "$opt{'tmpdir'}/z.mnc");
      
      &do_cmd('minclookup', '-clobber',
         '-range', 1.0, 1.2,
         '-lut_string', '0 1; 1 0',
         "$opt{'tmpdir'}/z.mnc", "$opt{'tmpdir'}/$bname.m.mnc");
      
      &do_cmd('mincmath', '-clobber',
         '-max_buffer_size_in_kb', 4096000,
         '-mult', $i, "$opt{'tmpdir'}/$bname.m.mnc",
         "$opt{'tmpdir'}/$bname.t.mnc");
        
      push(@numer_files, "$opt{'tmpdir'}/$bname.t.mnc");
      push(@denom_files, "$opt{'tmpdir'}/$bname.m.mnc");
      }

   &do_cmd('mincmath', '-clobber',
      '-double',
      '-max_buffer_size_in_kb', 4096000,
      '-add', @numer_files, "$opt{'tmpdir'}/numer.mnc");
   
   &do_cmd('mincmath', '-clobber',
      '-double',
      '-max_buffer_size_in_kb', 4096000,
      '-add', @denom_files, "$opt{'tmpdir'}/denom.mnc");
   
   &do_cmd('minccalc', '-clobber',
      $opt{'output_type'},
      '-max_buffer_size_in_kb', 4096000,
      '-expression', '(A[1] < 0.001) ? 0 : A[0]/A[1]',
      "$opt{'tmpdir'}/numer.mnc", "$opt{'tmpdir'}/denom.mnc",
      $avgfile);
   }



sub do_cmd { 
   print STDOUT "@_\n" if $opt{'verbose'};
   if(!$opt{'fake'}){
      system(@_) == 0 or die;
   }
}

sub print_version_info {
   print STDOUT "\n$PACKAGE version $VERSION\n".
                "Comments to $PACKAGE_BUGREPORT\n\n";
   exit;
   }
   
   
   
$Help = <<HELP;
| $me will average 1000's of minc files
|
| Problems or comments should be sent to: a.janke\@gmail.com
HELP


        
__END__  
         
=head1 NAME
         
B<mincbigaverage> - averages 1000's of MINC files in linear time.
         
=head1 SYNOPSIS                                                                                                                        
         
B<mincbigaverage> [options] infile1.mnc [infile2.mnc [..]] avg.mnc
         
mincbigaverage is designed to discretise the problem of averaging either
a large number of input files or averaging a smaller number of large 
files. (>1GB each). There is also some code included to perform "robust"
averaging in which only the most common features are kept via down-weighting
outliers beyond a standard deviation.
         
   $ mincbigaverage --verbose --robust_average \
       in1.mnc in2.mnc in3.mnc in4.mnc avg.mnc
         
=head1 DESCRIPTION
         
B<mincbigaverage> is to get around issues of the number of possible open
files in HDF/netCDF. In short if you have more than 100 files open at once
while averaging things will slow down significantly.

mincbigaverage does this via a iterative approach to averaging files and
is a direct drop in replacement for mincaverage. That said not all the 
arguments of mincaverage are supported in mincbigaverage but they should
be. (in time).
         
Problems or comments should be sent to: a.janke@gmail.com
         
=head1 OPTIONS
         
=over 4  
         
=item B<-v>, B<--verbose>
         
Be noisy when doing things
         
=item B<--version>
         
Print version number and exit
         
=item B<-h>, B<--help>
         
Dump some quick help output
         
=item B<--man>
         
Dump a man page
         
=item B<-f>, B<--fake>
         
Don't run anything, just echo the commands that would have been run

=item B<-t>, B<--tmpdir>
         
Define a tmpdir, should be used with --robust as vast amount of data will
be produced for a large number of input files

=item B<--sdfile> 

Place standard deviation image in specified file

=item B<--avgnum>

Number of input files to average at a time (Default: 20)

=item B<--filelist>

Input file with the files to be averaged one per line

=item B<--robust>

Perform robust averaging, features that are outside 1 standard deviation
from the mean are downweighted. Works well for noisy data with artifacts.
see the --tmpdir option if you have a large number of input files.
        
=back
        
=head1 SEE ALSO
        
mincaverage(1) minccalc(1)
    
=head1 AUTHOR
        
Andrew Janke - a.janke@gmail.com
        
=cut 
